<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Builder.Dialogs</name>
    </assembly>
    <members>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.Choice.Value">
            <summary>
            Gets or sets the value to return when selected.
            </summary>
            <value>
            The value to return when selected.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.Choice.Action">
            <summary>
            Gets or sets the action to use when rendering the choice as a suggested action. This is optional.
            </summary>
            <value>
            The action to use when rendering the choice as a suggested action.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.Choice.Synonyms">
            <summary>
            Gets or sets the list of synonyms to recognize in addition to the value. This is optional.
            </summary>
            <value>
            The list of synonyms to recognize in addition to the value.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Choices.ChoiceFactoryOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Dialogs.Choices.ChoiceFactoryOptions"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Choices.ChoiceFactoryOptions.#ctor(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Dialogs.Choices.ChoiceFactoryOptions"/> class.
            Refer to the code in teh ConfirmPrompt for an example of usage.
            </summary>
            <param name="inlineSeparator">The inline seperator value.</param>
            <param name="inlineOr">The inline or value.</param>
            <param name="inlineOrMore">The inline or more value.</param>
            <param name="includeNumbers">Flag indicating whether to include numbers as a choice.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.ChoiceFactoryOptions.InlineSeparator">
            <summary>
            Gets or sets the character used to separate individual choices when there are more than 2 choices.
            The default value is `", "`. This is optional.
            </summary>
            <value>
            The character used to separate individual choices when there are more than 2 choices.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.ChoiceFactoryOptions.InlineOr">
            <summary>
            Gets or sets the separator inserted between the choices when their are only 2 choices. The default
            value is `" or "`. This is optional.
            </summary>
            <value>
            The separator inserted between the choices when their are only 2 choices.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.ChoiceFactoryOptions.InlineOrMore">
            <summary>
            Gets or sets the separator inserted between the last 2 choices when their are more than 2 choices.
            The default value is `", or "`. This is optional.
            </summary>
            <value>
            The separator inserted between the last 2 choices when their are more than 2 choices.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.ChoiceFactoryOptions.IncludeNumbers">
            <summary>
            Gets or sets a value indicating whether an inline and list style choices will be prefixed with the index of the
            choice as in "1. choice". If <see langword="false"/>, the list style will use a bulleted list instead.The default value is <see langword="true"/>.
            </summary>
            <value>
            A <c>true</c>if an inline and list style choices will be prefixed with the index of the
            choice as in "1. choice"; otherwise a <c>false</c> and the list style will use a bulleted list instead.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FindChoicesOptions.NoValue">
            <summary>
            Gets or sets a value indicating whether the choices value will NOT be search over.
            The default is <c>false</c>. This is optional.
            </summary>
            <value>
            A <c>true</c> if the choices value will NOT be search over; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FindChoicesOptions.NoAction">
            <summary>
            Gets or sets a value indicating whether the title of the choices action will NOT be searched over.
            The default is <c>false</c>. This is optional.
            </summary>
            <value>
            A <c>true</c> if the title of the choices action will NOT be searched over; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FindValuesOptions.AllowPartialMatches">
            <summary>
            Gets or sets a value indicating whether only some of the tokens in a value need to exist to be considered
            a match. The default value is "false". This is optional.
            </summary>
            <value>
            A <c>true</c> if only some of the tokens in a value need to exist to be considered; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FindValuesOptions.Locale">
            <summary>
            Gets or sets the locale/culture code of the utterance. The default is `en-US`. This is optional.
            </summary>
            <value>
            The locale/culture code of the utterance.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FindValuesOptions.MaxTokenDistance">
            <summary>
            Gets or sets the maximum tokens allowed between two matched tokens in the utterance. So with
            a max distance of 2 the value "second last" would match the utterance "second from the last"
            but it wouldn't match "Wait a second. That's not the last one is it?".
            The default value is "2".
            </summary>
            <value>
            The maximum tokens allowed between two matched tokens in the utterance.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FindValuesOptions.Tokenizer">
            <summary>
            Gets or sets the tokenizer to use when parsing the utterance and values being recognized.
            </summary>
            <value>
            The tokenizer to use when parsing the utterance and values being recognized.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FoundChoice.Value">
            <summary>
            Gets or sets the value of the choice that was matched.
            </summary>
            <value>
            The value of the choice that was matched.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FoundChoice.Index">
            <summary>
            Gets or sets the choices index within the list of choices that was searched over.
            </summary>
            <value>
            The choices index within the list of choices that was searched over.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FoundChoice.Score">
            <summary>
            Gets or sets the accuracy with which the synonym matched the specified portion of the utterance. A
            value of 1.0 would indicate a perfect match.
            </summary>
            <value>
            The accuracy with which the synonym matched the specified portion of the utterance. A
            value of 1.0 would indicate a perfect match.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FoundChoice.Synonym">
            <summary>
            Gets or sets the synonym that was matched. This is optional.
            </summary>
            <value>
            The synonym that was matched.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FoundValue.Value">
            <summary>
            Gets or sets the value that was matched.
            </summary>
            <value>
            The value that was matched.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FoundValue.Index">
            <summary>
            Gets or sets the index of the value that was matched.
            </summary>
            <value>
            The index of the value that was matched.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.FoundValue.Score">
            <summary>
            Gets or sets the accuracy with which the value matched the specified portion of the utterance. A
            value of 1.0 would indicate a perfect match.
            </summary>
            <value>
            The accuracy with which the value matched the specified portion of the utterance. A
            value of 1.0 would indicate a perfect match.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Choices.ListStyle">
            <summary>
            Controls the way that choices for a `ChoicePrompt` or yes/no options for a `ConfirmPrompt` are
            presented to a user.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.Choices.ListStyle.None">
            <summary>
            Don't include any choices for prompt.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.Choices.ListStyle.Auto">
            <summary>
            Automatically select the appropriate style for the current channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.Choices.ListStyle.Inline">
            <summary>
            Add choices to prompt as an inline list.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.Choices.ListStyle.List">
            <summary>
            Add choices to prompt as a numbered list.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.Choices.ListStyle.SuggestedAction">
            <summary>
            Add choices to prompt as suggested actions.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Choices.SortedValue">
            <summary>
            A value that can be sorted and still refer to its original position with a source array.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.SortedValue.Value">
            <summary>
            Gets or sets the value that will be sorted.
            </summary>
            <value>
            The value that will be sorted.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Choices.SortedValue.Index">
            <summary>
            Gets or sets the values original position within its unsorted array.
            </summary>
            <value>
            The values original position within its unsorted array.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Choices.Tokenizer.DefaultTokenizerImpl(System.String,System.String)">
            <summary>
            Simple tokenizer that breaks on spaces and punctuation. The only normalization done is to lowercase.
            This is an exact port of the JavaScript implementation of the algorithm except that here
            the .NET library functions are used in place of the JavaScript string code point functions.
            </summary>
            <param name="text">The text being tokenized.</param>
            <param name="locale">The locale of the text.</param>
            <returns>A list of tokens.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ComponentDialog.TelemetryClient">
            <summary>
            Gets or sets or set the <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> to use.
            When setting this property, all the contained dialogs TelemetryClient properties are also set.
            </summary>
            <value>The <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> to use when logging.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.ComponentDialog.AddDialog(Microsoft.Bot.Builder.Dialogs.Dialog)">
            <summary>
            Adds a dialog to the component dialog.
            </summary>
            <param name="dialog">The dialog to add.</param>
            <returns>The updated <see cref="T:Microsoft.Bot.Builder.Dialogs.ComponentDialog"/>.</returns>
            <remarks>Adding a new dialog will inherit the <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> of the ComponentDialog.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.ComponentDialog.FindDialog(System.String)">
            <summary>
            Finds a dialog by ID.
            </summary>
            <param name="dialogId">The ID of the dialog to find.</param>
            <returns>The dialog; or <c>null</c> if there is not a match for the ID.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Dialog">
            <summary>
            Base class for all dialogs.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Dialog.TelemetryClient">
            <summary>
            Gets or sets the telemetry client for logging events.
            </summary>
            <value>The Telemetry Client logger.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Dialog.BeginDialogAsync(Microsoft.Bot.Builder.Dialogs.DialogContext,System.Object,System.Threading.CancellationToken)">
            <summary>
            Method called when a new dialog has been pushed onto the stack and is being activated.
            </summary>
            <param name="dc">The dialog context for the current turn of conversation.</param>
            <param name="options">(Optional) arguments that were passed to the dialog during `begin()` call that started the instance.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Dialog.ContinueDialogAsync(Microsoft.Bot.Builder.Dialogs.DialogContext,System.Threading.CancellationToken)">
            <summary>
            Method called when an instance of the dialog is the "current" dialog and the
            user replies with a new activity. The dialog will generally continue to receive the users
            replies until it calls either `DialogSet.end()` or `DialogSet.begin()`.
            If this method is NOT implemented then the dialog will automatically be ended when the user replies.
            </summary>
            <param name="dc">The dialog context for the current turn of conversation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Dialog.ResumeDialogAsync(Microsoft.Bot.Builder.Dialogs.DialogContext,Microsoft.Bot.Builder.Dialogs.DialogReason,System.Object,System.Threading.CancellationToken)">
            <summary>
            Method called when an instance of the dialog is being returned to from another
            dialog that was started by the current instance using `DialogSet.begin()`.
            If this method is NOT implemented then the dialog will be automatically ended with a call
            to `DialogSet.endDialogWithResult()`. Any result passed from the called dialog will be passed
            to the current dialogs parent.
            </summary>
            <param name="dc">The dialog context for the current turn of conversation.</param>
            <param name="reason">Reason why the dialog resumed.</param>
            <param name="result">(Optional) value returned from the dialog that was called. The type of the value returned is dependant on the dialog that was called.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogContext.#ctor(Microsoft.Bot.Builder.Dialogs.DialogSet,Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.Dialogs.DialogState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Dialogs.DialogContext"/> class.
            </summary>
            <param name="dialogs">Parent dialog set.</param>
            <param name="turnContext">Context for the current turn of conversation with the user.</param>
            <param name="state">Current dialog state.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.DialogContext.ActiveDialog">
            <summary>
            Gets the cached instance of the active dialog on the top of the stack or <c>null</c> if the stack is empty.
            </summary>
            <value>
            The cached instance of the active dialog on the top of the stack or <c>null</c> if the stack is empty.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogContext.BeginDialogAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Pushes a new dialog onto the dialog stack.
            </summary>
            <param name="dialogId">ID of the dialog to start.</param>
            <param name="options">(Optional) additional argument(s) to pass to the dialog being started.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogContext.PromptAsync(System.String,Microsoft.Bot.Builder.Dialogs.PromptOptions,System.Threading.CancellationToken)">
            <summary>
            Helper function to simplify formatting the options for calling a prompt dialog. This helper will
            take a `PromptOptions` argument and then call[begin(context, dialogId, options)](#begin).
            </summary>
            <param name="dialogId">ID of the prompt to start.</param>
            <param name="options">Contains a Prompt, potentially a RetryPrompt and if using ChoicePrompt, Choices.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogContext.ContinueDialogAsync(System.Threading.CancellationToken)">
            <summary>
            Continues execution of the active dialog, if there is one, by passing the context object to
            its `Dialog.ContinueDialogAsync()` method. You can check `context.responded` after the call completes
            to determine if a dialog was run and a reply was sent to the user.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogContext.EndDialogAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Ends a dialog by popping it off the stack and returns an optional result to the dialogs
            parent.The parent dialog is the dialog the started the on being ended via a call to
            either[begin()](#begin) or [prompt()](#prompt).
            The parent dialog will have its `Dialog.resume()` method invoked with any returned
            result. If the parent dialog hasn't implemented a `resume()` method then it will be
            automatically ended as well and the result passed to its parent. If there are no more
            parent dialogs on the stack then processing of the turn will end.
            </summary>
            <param name="result"> (Optional) result to pass to the parent dialogs.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogContext.CancelAllDialogsAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes any existing dialog stack thus cancelling all dialogs on the stack.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The dialog context.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogContext.ReplaceDialogAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Ends the active dialog and starts a new dialog in its place. This is particularly useful
            for creating loops or redirecting to another dialog.
            </summary>
            <param name="dialogId">ID of the new dialog to start.</param>
            <param name="options">(Optional) additional argument(s) to pass to the new dialog.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogContext.RepromptDialogAsync(System.Threading.CancellationToken)">
            <summary>
            Calls reprompt on the currently active dialog, if there is one. Used with Prompts that have a reprompt behavior.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.DialogInstance">
            <summary>
            Tracking information for a dialog on the stack.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.DialogInstance.Id">
            <summary>
            Gets or sets the ID of the dialog this instance is for.
            </summary>
            <value>
            ID of the dialog this instance is for.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.DialogInstance.State">
            <summary>
            Gets or sets the instances persisted state.
            </summary>
            <value>
            The instances persisted state.
            </value>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.DialogReason.BeginCalled">
            <summary>
            A dialog is being started through a call to `DialogContext.BeginAsync()`.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.DialogReason.ContinueCalled">
            <summary>
            A dialog is being continued through a call to `DialogContext.ContinueDialogAsync()`.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.DialogReason.EndCalled">
            <summary>
            A dialog ended normally through a call to `DialogContext.EndDialogAsync()`.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.DialogReason.ReplaceCalled">
            <summary>
            A dialog is ending because its being replaced through a call to `DialogContext.ReplaceDialogAsync()`.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.DialogReason.CancelCalled">
            <summary>
            A dialog was cancelled as part of a call to `DialogContext.CancelAllDialogsAsync()`.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.DialogReason.NextCalled">
            <summary>
            A step was advanced through a call to `WaterfallStepContext.NextAsync()`.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.DialogSet">
            <summary>
            A related set of dialogs that can all call each other.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.DialogSet.TelemetryClient">
            <summary>
            Gets or sets or set the <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> to use.
            When setting this property, all the contained dialogs TelemetryClient properties are also set.
            </summary>
            <value>The <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> to use when logging.</value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogSet.Add(Microsoft.Bot.Builder.Dialogs.Dialog)">
            <summary>
            Adds a new dialog to the set and returns the added dialog.
            </summary>
            <param name="dialog">The dialog to add.</param>
            <returns>The DialogSet for fluent calls to Add().</returns>
            <remarks>Adding a new dialog will inherit the <see cref="T:Microsoft.Bot.Builder.IBotTelemetryClient"/> of the DialogSet.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogSet.Find(System.String)">
            <summary>
            Finds a dialog that was previously added to the set using [add()](#add).
            </summary>
            <param name="dialogId">ID of the dialog/prompt to lookup.</param>
            <returns>dialog if found otherwise null.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.DialogTurnResult">
            <summary>
            Result returned to the caller of one of the various stack manipulation methods and used to
            return the result from a final call to `DialogContext.end()` to the bots logic.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.DialogTurnResult.Status">
            <summary>
            Gets or sets the current status of the stack.
            </summary>
            <value>
            The current status of the stack.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.DialogTurnResult.Result">
             <summary>
             Gets or sets the result returned by a dialog that was just ended.
             This will only be populated in certain cases:
            
             - The bot calls `dc.begin()` to start a new dialog and the dialog ends immediately.
             - The bot calls `dc.continue()` and a dialog that was active ends.
            
             In all cases where it's populated, [active](#active) will be `false`.
             </summary>
             <value>
             The result returned by a dialog that was just ended.
             </value>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.DialogTurnStatus.Empty">
            <summary>
            Indicates that there is currently nothing on the dialog stack.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.DialogTurnStatus.Waiting">
            <summary>
            Indicates that the dialog on top is waiting for a response from the user.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.DialogTurnStatus.Complete">
            <summary>
            Indicates that the dialog completed successfully, the result is available, and the stack is empty.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.DialogTurnStatus.Cancelled">
            <summary>
            Indicates that the dialog was cancelled and the stack is empty.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.ActivityPrompt">
            <summary>
            Basic configuration options supported by all prompts.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.ConfirmPrompt">
             <summary>
             Prompts a user to confirm something with a yes/no response.
            
             <remarks>By default the prompt will return to the calling dialog a `boolean` representing the users
             selection.
             When used with your bots 'DialogSet' you can simply add a new instance of the prompt as a named
             dialog using <code>DialogSet.Add()</code>. You can then start the prompt from a waterfall step using either
             <code>DialogContext.Begin()</code> or <code>DialogContext.Prompt()</code>. The user will be prompted to answer a
             'yes/no' or 'true/false' question and the users response will be passed as an argument to the
             callers next waterfall step
             </remarks>
             </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.ConfirmPrompt.#ctor(System.String,Microsoft.Bot.Builder.Dialogs.PromptValidator{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Dialogs.ConfirmPrompt"/> class.
            </summary>
            <param name="dialogId">Dialog identifier.</param>
            <param name="validator">Validator that will be called each time the user responds to the prompt.
            If the validator replies with a message no additional retry prompt will be sent.</param>
            <param name="defaultLocale">The default culture or locale to use if the <see cref="P:Microsoft.Bot.Schema.Activity.Locale"/>
            of the <see cref="T:Microsoft.Bot.Builder.Dialogs.DialogContext"/>.<see cref="P:Microsoft.Bot.Builder.Dialogs.DialogContext.Context"/>.<see cref="P:Microsoft.Bot.Builder.ITurnContext.Activity"/>
            is not specified.</param>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ConfirmPrompt.Style">
            <summary>
            Gets or sets the style of the yes/no choices rendered to the user when prompting.
            <seealso cref="T:Microsoft.Bot.Builder.Dialogs.Choices.ListStyle"/>
            </summary>
            <value>
            The style of the yes/no choices rendered to the user when prompting.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ConfirmPrompt.ChoiceOptions">
            <summary>
            Gets or sets additional options passed to the <seealso cref="T:Microsoft.Bot.Builder.Dialogs.Choices.ChoiceFactory"/>
            and used to tweak the style of choices rendered to the user.
            </summary>
            <value>
            Additional options passed to the <seealso cref="T:Microsoft.Bot.Builder.Dialogs.Choices.ChoiceFactory"/>
            and used to tweak the style of choices rendered to the user.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.OAuthPrompt">
             <summary>
             Creates a new prompt that asks the user to sign in using the Bot Frameworks Single Sign On (SSO)
             service.
            
             @remarks
             The prompt will attempt to retrieve the users current token and if the user isn't signed in, it
             will send them an `OAuthCard` containing a button they can press to signin. Depending on the
             channel, the user will be sent through one of two possible signin flows:
            
             - The automatic signin flow where once the user signs in and the SSO service will forward the bot
             the users access token using either an `event` or `invoke` activity.
             - The "magic code" flow where where once the user signs in they will be prompted by the SSO
             service to send the bot a six digit code confirming their identity. This code will be sent as a
             standard `message` activity.
            
             Both flows are automatically supported by the `OAuthPrompt` and the only thing you need to be
             careful of is that you don't block the `event` and `invoke` activities that the prompt might
             be waiting on.
            
             > [!NOTE]
             > You should avoid persisting the access token with your bots other state. The Bot Frameworks
             > SSO service will securely store the token on your behalf. If you store it in your bots state
             > it could expire or be revoked in between turns.
             >
             > When calling the prompt from within a waterfall step you should use the token within the step
             > following the prompt and then let the token go out of scope at the end of your function.
            
             #### Prompt Usage
            
             When used with your bots `DialogSet` you can simply add a new instance of the prompt as a named
             dialog using `DialogSet.add()`. You can then start the prompt from a waterfall step using either
             `DialogContext.begin()` or `DialogContext.prompt()`. The user will be prompted to signin as
             needed and their access token will be passed as an argument to the callers next waterfall step.
             </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.OAuthPrompt.GetUserTokenAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Get a token for a user signed in.
            </summary>
            <param name="turnContext">Context for the current turn of the conversation with the user.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.OAuthPrompt.SignOutUserAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Sign Out the User.
            </summary>
            <param name="turnContext">Context for the current turn of the conversation with the user.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Prompt`1">
            <summary>
            Basic configuration options supported by all prompts.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Microsoft.Bot.Builder.Dialogs.Prompt`1"/>.</typeparam>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.PromptOptions.Prompt">
            <summary>
            Gets or sets the initial prompt to send the user as <seealso cref="T:Microsoft.Bot.Schema.Activity"/>Activity.
            </summary>
            <value>
            The initial prompt to send the user as <seealso cref="T:Microsoft.Bot.Schema.Activity"/>Activity.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.PromptOptions.RetryPrompt">
            <summary>
            Gets or sets the retry prompt to send the user as <seealso cref="T:Microsoft.Bot.Schema.Activity"/>Activity.
            </summary>
            <value>
            The retry prompt to send the user as <seealso cref="T:Microsoft.Bot.Schema.Activity"/>Activity.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptValidator`1">
            <summary>
            The delegate definition for custom prompt validators. Implement this function to add custom validation to a prompt.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="promptContext">The prompt validation context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> of bool representing the asynchronous operation indicating validation success or failure.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.WaterfallDialog">
            <summary>
            Dialog optimized for prompting a user with a series of questions. Waterfalls accept a stack of
            functions which will be executed in sequence.Each waterfall step can ask a question of the user
            and the users response will be passed as an argument to the next waterfall step.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.WaterfallDialog.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Dialogs.WaterfallStep})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Dialogs.WaterfallDialog"/> class.
            </summary>
            <param name="dialogId">The dialog id.</param>
            <param name="steps">Optional steps to be defined by caller.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.WaterfallDialog.AddStep(Microsoft.Bot.Builder.Dialogs.WaterfallStep)">
            <summary>
            Add a new step to the waterfall.
            </summary>
            <param name="step">Step to add.</param>
            <returns>Waterfall dialog for fluent calls to .AddStep().</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.WaterfallDialog.EndDialogAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.Dialogs.DialogInstance,Microsoft.Bot.Builder.Dialogs.DialogReason,System.Threading.CancellationToken)">
            <summary>
            Called when the dialog is ending.
            </summary>
            <param name="turnContext">Context for the current turn of conversation.</param>
            <param name="instance">The instance of the current dialog.</param>
            <param name="reason">he reason the dialog is ending.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.WaterfallStep">
            <summary>
            A delegate definition of a Waterfall step. This is implemented by application code.
            </summary>
            <param name="stepContext">The WaterfallStepContext for this waterfall dialog.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:Microsoft.Bot.Builder.Dialogs.DialogTurnResult"/> representing the asynchronous operation.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.WaterfallStepContext.Index">
            <summary>
            Gets the index of the current waterfall step being executed.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.WaterfallStepContext.Options">
            <summary>
            Gets any options the waterfall dialog was called with.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.WaterfallStepContext.Reason">
            <summary>
            Gets the reason the waterfall step is being executed.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.WaterfallStepContext.Result">
            <summary>
            Gets results returned by a dialog called in the previous waterfall step.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.WaterfallStepContext.Values">
            <summary>
            Gets a dictionary of values which will be persisted across all waterfall steps.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.WaterfallStepContext.NextAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Used to skip to the next waterfall step.
            </summary>
            <param name="result">Optional result to pass to next step.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:Microsoft.Bot.Builder.Dialogs.DialogTurnResult"/> representing the asynchronous operation.</returns>
        </member>
    </members>
</doc>
